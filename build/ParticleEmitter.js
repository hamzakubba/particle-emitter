'use strict';Object.defineProperty(exports,'__esModule',{value:true});const assert=(condition,error)=>{if(!condition){throw new Error(error)}};const getMap=(array=[])=>new Map(array.map(elem=>typeof elem==='string'?[elem,elem]:elem===null?['',null]:elem).map(([key,val])=>Array.isArray(key)?key.map(innerKey=>[innerKey,val]):[[key,val]]).reduce((accumulator,currentValue)=>{currentValue.forEach(innerArray=>accumulator.push(innerArray));return accumulator},[]));class ParticleEmitter{constructor(config){const{rules,mediaQueries=[],lists=[],defaultClassTemplate='.$prefix$key$suffix$mediaQuery',defaultRuleTemplate='$value'}=JSON.parse(JSON.stringify(config));this.rules=rules;this.mediaQueries=mediaQueries;this.lists=lists;this.defaultClassTemplate=defaultClassTemplate;this.defaultRuleTemplate=defaultRuleTemplate;this.validate();this.init()}validate(){assert(this.rules&&this.rules.length,'No rules found')}init(){this.rules=getMap(this.rules);this.mediaQueries=getMap(this.mediaQueries);this.lists=getMap(this.lists);this.lists.forEach((val,key)=>{this.lists.set(key,getMap(val))})}getCss(){let css='\n';this.rules.forEach((value,key)=>{css+=this.getRuleCss({key,value})});css+='\n';let indent;this.mediaQueries.forEach((mediaQueryMinMax,mediaQuery)=>{if(!mediaQuery){mediaQuery='';indent=''}else{css+='@media screen';if(mediaQueryMinMax[0]){css+=` and (min-width: ${mediaQueryMinMax[0]})`}if(mediaQueryMinMax[1]){css+=` and (max-width: ${mediaQueryMinMax[1]})`}css+=' {\n';indent='  '}this.rules.forEach((value,key)=>{if(value.repeatForMediaQueries){css+=this.getRuleCss({indent,mediaQuery,key,value})}});if(mediaQuery){css+='}'}css+='\n\n'});return css}getRuleCss({indent='',mediaQuery='',key,value}){let ruleCss='';const{prefix='',suffix='',map,classTemplate=this.defaultClassTemplate,ruleTemplate=this.defaultRuleTemplate,staticRules='',customRules=[],repeatFor=[]}=value;if(!mediaQuery&&staticRules){ruleCss+=staticRules}const repeatForMaps=new Map;if(map&&map.length){repeatForMaps.set('',getMap(map))}repeatFor.forEach(listName=>repeatForMaps.set(listName,this.lists.get(listName)));if(repeatForMaps.size){const loops=[];let depth=0;repeatForMaps.forEach((map,name)=>{loops.push({map:map,depth:depth,keyName:name?name+'Key':'key',valueName:name?name+'Value':'value'});depth++});const looper=(loops=[],depth=0,maxDepth=loops.length,loopStack=[])=>{if(depth<maxDepth){return loops[depth].map.forEach((value,key)=>{loopStack.push([key,value]);looper(loops,depth+1,maxDepth,loopStack);loopStack.pop()})}else{let css=`${indent}${classTemplate} { ${ruleTemplate}; }\n`.replace(new RegExp('\\$prefix','g'),prefix).replace(new RegExp('\\$suffix','g'),suffix).replace(new RegExp('\\$mediaQuery','g'),mediaQuery);loopStack.forEach(()=>{let outputDepth=0;loopStack.forEach(([key,value])=>{css=css.replace(new RegExp('\\$'+loops[outputDepth].keyName,'g'),key).replace(new RegExp('\\$'+loops[outputDepth].valueName,'g'),value);outputDepth++})});ruleCss+=css}};looper(loops)}const customRulesMap=getMap(customRules);customRulesMap.forEach((value,key)=>{ruleCss+=`${indent}${this.defaultClassTemplate} { ${this.defaultRuleTemplate} }\n`.replace('$prefix',prefix).replace('$suffix',suffix).replace('$key',key).replace('$value',value).replace('$mediaQuery',mediaQuery)});ruleCss+='\n';return ruleCss}}exports.default=ParticleEmitter;
